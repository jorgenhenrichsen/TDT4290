# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-10-11 16:59
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import resultregistration.enums
import resultregistration.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clubName', models.CharField(max_length=100)),
                ('region', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competitionCategory', models.CharField(max_length=100, validators=[resultregistration.validators.validate_name])),
                ('location', models.CharField(max_length=100)),
                ('startDate', models.DateField(help_text='år-måned-dag')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groupNumber', models.IntegerField()),
                ('date', models.DateField()),
                ('notes', models.CharField(max_length=300)),
                ('recordsDescription', models.CharField(max_length=300)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resultregistration.Competition')),
            ],
        ),
        migrations.CreateModel(
            name='MoveAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moveType', models.IntegerField(choices=[(0, 'Snatch'), (1, 'Clean and jerk')])),
                ('attemptNum', models.IntegerField(validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('weight', models.IntegerField()),
                ('success', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=40, validators=[resultregistration.validators.validate_name], verbose_name='Fornavn')),
                ('last_name', models.CharField(max_length=100, validators=[resultregistration.validators.validate_name], verbose_name='Etternavn')),
                ('birth_date', models.DateField(verbose_name='Fødselsdato')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('resultID', models.IntegerField(primary_key=True, serialize=False)),
                ('total', models.IntegerField(null=True)),
                ('points', models.IntegerField(null=True)),
                ('points_veteran', models.IntegerField(null=True)),
                ('sinclair_coefficient', models.FloatField(null=True)),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='resultregistration.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Judge',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resultregistration.Person')),
                ('judge_level', models.CharField(choices=[('0', 'Level0'), ('1', 'Level1'), ('2', 'Level2'), ('3', 'Level3')], default=resultregistration.enums.JudgeLevel(0), max_length=10)),
            ],
            bases=('resultregistration.person',),
        ),
        migrations.CreateModel(
            name='Lifter',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resultregistration.Person')),
                ('gender', models.CharField(choices=[('K', 'female'), ('M', 'male')], max_length=10, null=True, verbose_name='Kjønn')),
            ],
            bases=('resultregistration.person',),
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resultregistration.Person')),
            ],
            bases=('resultregistration.person',),
        ),
        migrations.AddField(
            model_name='moveattempt',
            name='parentResult',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resultregistration.Result'),
        ),
        migrations.AddField(
            model_name='club',
            name='competition',
            field=models.ManyToManyField(blank=True, null=True, to='resultregistration.Competition'),
        ),
        migrations.AddField(
            model_name='result',
            name='lifter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resultregistration.Lifter'),
        ),
        migrations.AlterUniqueTogether(
            name='moveattempt',
            unique_together=set([('parentResult', 'attemptNum')]),
        ),
        migrations.AddField(
            model_name='lifter',
            name='club',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='resultregistration.Club'),
        ),
        migrations.AddField(
            model_name='group',
            name='cheifMarshall',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chiefMarshall', to='resultregistration.Staff'),
        ),
        migrations.AddField(
            model_name='group',
            name='competitionLeader',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitionLeader', to='resultregistration.Staff'),
        ),
        migrations.AddField(
            model_name='group',
            name='competitors',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='resultregistration.Lifter'),
        ),
        migrations.AddField(
            model_name='group',
            name='judges',
            field=models.ManyToManyField(related_name='judges', to='resultregistration.Judge'),
        ),
        migrations.AddField(
            model_name='group',
            name='jury',
            field=models.ManyToManyField(related_name='jury', to='resultregistration.Staff'),
        ),
        migrations.AddField(
            model_name='group',
            name='secretary',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='secretary', to='resultregistration.Staff'),
        ),
        migrations.AddField(
            model_name='group',
            name='speaker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speaker', to='resultregistration.Staff'),
        ),
        migrations.AddField(
            model_name='group',
            name='technicalController',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='technicalController', to='resultregistration.Staff'),
        ),
        migrations.AddField(
            model_name='group',
            name='timeKeeper',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timeKeeper', to='resultregistration.Staff'),
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together=set([('groupNumber', 'competition')]),
        ),
    ]
